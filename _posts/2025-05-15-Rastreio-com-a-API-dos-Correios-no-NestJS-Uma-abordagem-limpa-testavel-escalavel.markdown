---
layout: post
author: humberto_barbosa
title: "Integra√ß√£o Correios para Rastreamento de Entregas: Arquitetura Escal√°vel com NestJS e Kafka"
date: 2025-05-15 09:00:00 -0300
categories: [Integra√ß√£o com APIs externas, Arquitetura de Software, Engenharia de Software, Desenvolvimento Backend, Boas Pr√°ticas de Programa√ß√£o, Testes de Software, Mensageria e Event-Driven Architecture, Observabilidade e Monitoramento, Solu√ß√µes para E-commerce, Automa√ß√£o de Processos Log√≠sticos, Microsservi√ßos e Escalabilidade, Design Patterns, Clean Code]
tags: [e-commerce, log√≠stica, rastreamento de pedidos, Correios, API Gateway, NestJS, Clean Architecture, Kafka, mensageria, status de entrega, integra√ß√£o de sistemas, testes unit√°rios, jest-mock-extended, resili√™ncia, logging, desacoplamento, inje√ß√£o de depend√™ncia, arquitetura hexagonal, microsservi√ßos, eventos, orquestra√ß√£o, transportadoras, fallback, monitoramento, manuten√ß√£o de software, boas pr√°ticas, automatiza√ß√£o, reprocessamento, mock, testes automatizados]
---

### Introdu√ß√£o

Nos sistemas de e-commerce e da log√≠stica, rastrear o status de entregas √© essencial para garantir transpar√™ncia e agilidade no atendimento ao cliente. Automatizar esse processo com integra√ß√£o direta aos Correios √© um desafio que envolve lidar com APIs externas, mapeamento de status inconsistentes e atualiza√ß√£o em tempo real.

Neste artigo, vamos apresentar uma abordagem completa para orquestra√ß√£o de rastreamento de pedidos usando NestJS, aplicando os princ√≠pios de Clean Architecture, testes unit√°rios robustos e integra√ß√£o com mensageria (Kafka).

### Desenho da Solu√ß√£o

A solu√ß√£o gira em torno do caso de uso `TrackingOrderStatusService`, respons√°vel por:

- Consultar configura√ß√µes de contas com rastreamento ativo;
- Buscar os pedidos com status finalizados que devem ser atualizados;
- Integrar com a API dos Correios via `ProviderTrackingApiGateway`;
- Filtrar eventos novos n√£o registrados;
- Mapear os eventos para um modelo interno de status;
- Persistir os novos eventos no reposit√≥rio;
- Emitir mensagens Kafka sobre mudan√ßas de status;
- Registrar novos status desconhecidos para posterior mapeamento.

### Pontos de Complexidade

**1. Identifica√ß√£o de Status**

A API dos Correios utiliza uma combina√ß√£o de `codigo` e `tipo` para representar eventos. Essa combina√ß√£o foi padronizada com o helper:

```typescript
export function buildPartnerStatusId(codigo: string, tipo: string): string {
  return `${codigo}${tipo}`;
}
```

Isso garante que qualquer ponto do sistema que precise identificar unicamente um status tenha uma forma unificada, reduzindo erros e facilitando o mapeamento.

**2. Detec√ß√£o de Eventos Novos**

Para evitar a reprocessamento de eventos j√° persistidos, usamos o m√©todo `getNewHistories`. Ele compara os eventos vindos dos Correios com os eventos j√° salvos no hist√≥rico:

```typescript
private getNewHistories(tracking: TrackingData[], eventos: CorreiosEventoDTO[]): CorreiosEventoDTO[] {
  return eventos.filter(evento => !this.historyExists(evento, tracking));
}
```

E o `historyExists` compara tanto o c√≥digo concatenado quanto a data:

```typescript
private historyExists(evento: CorreiosEventoDTO, tracking: TrackingData[]): boolean {
  return tracking.some(hist => {
    return (
      hist.partner.statusCode === buildPartnerStatusId(evento.codigo, evento.tipo) &&
      compareDates(hist.eventDate, evento.dtHrCriado)
    );
  });
}
```

**3. Fallback para Status N√£o Mapeados**

Se um evento dos Correios n√£o tem status mapeado, salvamos esse status para posterior an√°lise e notificamos por Kafka:

```typescript
if (!statusMapped) {
  const newStatusPartner = new StatusCodePartner({ statusId, status });
  await this.statusCodePartnerRepository.save(newStatusPartner);

  await this.messageProvider.sendMessage({
    topic: KAFKA_TOPIC_FREIGHT_STATUS_CODE_PARTNER_NOT_FOUND,
    messages: [{
      key: JSON.stringify({ id: newStatusPartner.id }),
      value: { data: { ... } },
    }],
    headers: { 'X-Tenant-Id': accountId, 'X-Correlation-Id': randomUUID() },
  });
}
```

**4. Resili√™ncia e Logging**

Todas as etapas do processo possuem logging contextualizado:

```typescript
this.logger.log({
  id: 'TrackingOrderStatusService.trackingOrders',
  message: `[${tracking.accountId}|${tracking.order.internalOrderId}] Evento processado com sucesso.`,
});
```

Al√©m disso, exce√ß√µes s√£o capturadas e logadas para facilitar troubleshooting:

```typescript
catch (error) {
  this.logger.error({
    id: 'TrackingOrderStatusService.execute',
    message: error.message,
    stack: error.stack,
  });
}
```

### Abstra√ß√£o via API Gateway

Outro destaque importante da implementa√ß√£o √© o uso do `ProviderTrackingApiGateway`, uma interface que abstrai o consumo da API dos Correios. Ao inv√©s de depender diretamente de chamadas HTTP acopladas no servi√ßo, a integra√ß√£o √© feita via uma porta definida por contrato:

```
export interface ProviderTrackingApiGateway {
  getTracking(etiqueta: string, cep: string): Promise<CorreiosApiResponseTrackingStatus>;
}
```

Essa abordagem segue o princ√≠pio da Invers√£o de Depend√™ncia (DIP), permitindo:

- **Substituir facilmente a implementa√ß√£o por mocks em testes unit√°rios:**

```
correiosApiGateway = mock<ProviderTrackingApiGateway>();
correiosApiGateway.getTracking.mockResolvedValue(mockCorreiosTrackingResponse);
```

- **Trocar facilmente a origem do rastreamento (ex: transportadoras privadas)** sem alterar o caso de uso

- **Reduzir acoplamento e facilitar manuten√ß√£o**, pois a l√≥gica de orquestra√ß√£o n√£o precisa conhecer detalhes de implementa√ß√£o HTTP, headers ou autentica√ß√£o


Essa separa√ß√£o clara entre camada de aplica√ß√£o e infraestrutura melhora a testabilidade e prepara o c√≥digo para cen√°rios mais complexos.

### Boas Pr√°ticas Adotadas

- Invers√£o de depend√™ncia via tokens de inje√ß√£o;
- Separac√£o de responsabilidades (cada provider tem uma √∫nica fun√ß√£o);
- Logging com identificadores contextuais (`[accountId|orderId]`);
- Utiliza√ß√£o de `Promise.all` para opera√ß√µes paralelas (status + configura√ß√£o);
- Mensagens Kafka emitidas apenas para eventos novos.

### Testes Unit√°rios

#### üß™ Exemplo de Teste com Gateway Mockado

Abaixo est√° um exemplo real de como o `ProviderTrackingApiGateway` pode ser simulado em testes unit√°rios usando `jest-mock-extended`:

```typescript
import { mock, MockProxy } from 'jest-mock-extended';
import { ProviderTrackingApiGateway } from '../../correios/interfaces/provider-tracking-api-gateway';
import { CorreiosApiResponseTrackingStatus } from '../../correios/interfaces/provider-tracking-api-gateway';

describe('TrackingOrderStatusService ‚Äì Integra√ß√£o com Correios API', () => {
  let correiosApiGateway: MockProxy<ProviderTrackingApiGateway>;

  beforeEach(() => {
    correiosApiGateway = mock<ProviderTrackingApiGateway>();
  });

  it('deve retornar eventos simulados dos Correios via gateway mockado', async () => {
    const mockCorreiosResponse: CorreiosApiResponseTrackingStatus = {
      objetos: [
        {
          codObjeto: 'XYZ123456BR',
          dtPrevista: new Date('2025-04-25T18:00:00Z'),
          modalidade: 'F',
          peso: 1.2,
          formato: 'Pacote',
          eventos: [
            {
              codigo: 'BDE',
              tipo: '01',
              dtHrCriado: new Date('2025-04-21T14:00:00Z'),
              descricao: 'Objeto entregue ao destinat√°rio',
            },
          ],
        },
      ],
    };

    correiosApiGateway.getTracking.mockResolvedValue(mockCorreiosResponse);

    const result = await correiosApiGateway.getTracking('XYZ123456BR', '12345');

    expect(result.objetos[0].codObjeto).toBe('XYZ123456BR');
    expect(result.objetos[0].eventos[0].codigo).toBe('BDE');
  });
});
```

Esse mock garante que o `ApiGateway` esteja isolado e test√°vel sem fazer chamadas reais, permitindo simular qualquer tipo de retorno da API externa.

Para garantir a qualidade e a confiabilidade da l√≥gica, foram adicionados testes com `jest-mock-extended` para:

- `getAllStatusMapped`: mapeamento correto e fallback para status desconhecidos;
- `getNewHistories`: detec√ß√£o de eventos novos;
- `historyExists`: compara√ß√£o exata por status e data;
- `trackingOrders` e `execute`: cen√°rios completos de sucesso e falha.

### Li√ß√µes Aprendidas

- Pequenos helpers como `buildPartnerStatusId` e `compareDates` reduzem bugs e aumentam reutiliza√ß√£o;
- Separar persist√™ncia de envio em `sendMessageStatusNotFound` tornou o c√≥digo mais test√°vel e leg√≠vel;
- Centralizar a orquestra√ß√£o no caso de uso facilita extens√£o para outras transportadoras;
- Cobertura de testes auxilia na manuten√ß√£o sem medo de regress√£o.

### Conclus√£o

A solu√ß√£o apresentada mostra como √© poss√≠vel construir uma integra√ß√£o robusta com os Correios utilizando boas pr√°ticas de arquitetura, testes e logging. Al√©m de resolver o problema imediato de rastreamento, essa abordagem serve como base para integra√ß√£o com outros parceiros log√≠sticos.

Essa implementa√ß√£o est√° pronta para produ√ß√£o, observ√°vel e f√°cil de evoluir.
