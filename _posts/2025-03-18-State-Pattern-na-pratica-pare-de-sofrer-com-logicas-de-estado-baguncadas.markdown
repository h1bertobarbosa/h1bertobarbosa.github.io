---
layout: post
author: humberto_barbosa
title: "State Pattern na pr√°tica - pare de sofrer com l√≥gicas de estado bagun√ßadas"
date: 2025-03-18 18:32:08 -0300
categories: [desenvolvimento de software, padr√µes de design, boas pr√°ticas, TypeScript]
tags: [state pattern, design patterns, TypeScript, boas pr√°ticas, c√≥digo limpo]
---

Descobrir o **State Pattern** foi um ponto de virada. Esse padr√£o n√£o √© o mais falado, mas resolve um problema real: c√≥digo inchado por condicionais monstruosas.

Sabe aquelas m√°quinas de estado cheias de `if` e `switch`? O c√≥digo cresce, novos estados surgem e, de repente, qualquer altera√ß√£o vira uma dor de cabe√ßa. J√° viu algo assim?

```typescript
switch (status)
	"active":
		console.log('ja esta ativo...')
		break
	"blocked":
		console.log('user bloqueado com sucesso')
		break
	"canceled":
		console.log('user cancelado com sucesso')
		break
```

No come√ßo, parece tranquilo. Mas conforme o sistema evolui, o inferno come√ßa: um mar de condicionais espalhadas pelo c√≥digo. Manuten√ß√£o? Um pesadelo.

## Solu√ß√£o

O **State Pattern** resolve isso. Em vez de espalhar l√≥gica de estado, cada estado vira uma classe separada. O objeto principal apenas mant√©m uma refer√™ncia ao estado atual e delega as decis√µes para ele.

Menos bagun√ßa, mais organiza√ß√£o. E quando precisar adicionar um novo estado? S√≥ criar uma nova classe, sem tocar no c√≥digo existente. Quer c√≥digo flex√≠vel e f√°cil de manter? State Pattern √© o caminho.

## Exemplo

Aqui est√° um exemplo de implementa√ß√£o do **State Pattern** em **TypeScript** para modelar o status de uma conta (**Account**), que pode estar em um dos seguintes estados:

- `Active`
- `WaitingActivation`
- `Blocked`
- `Cancelled`

Cada estado implementar√° um comportamento diferente para a conta. Vamos definir as classes de estado e a classe de contexto (`Account`), que gerencia o estado atual.

### üìå **Passo 1: Definir a Interface do Estado**

Cada estado da conta precisa implementar essa interface para garantir que todos os estados tenham os mesmos m√©todos.

```typescript
interface AccountState {
  activate(): void;
  block(): void;
  cancel(): void;
  getStatus(): string;
}
```

### üìå **Passo 2: Criar as Implementa√ß√µes dos Estados**

Cada estado ter√° uma implementa√ß√£o espec√≠fica, alterando o comportamento da conta de acordo com a regra de neg√≥cio.

```typescript
class ActiveState implements AccountState {
  constructor(private account: Account) {}

  activate(): void {
    console.log("A conta j√° est√° ativa.");
  }

  block(): void {
    console.log("Bloqueando a conta...");
    this.account.setState(new BlockedState(this.account));
  }

  cancel(): void {
    console.log("Cancelando a conta...");
    this.account.setState(new CancelledState(this.account));
  }

  getStatus(): string {
    return "Active";
  }
}

class WaitingActivationState implements AccountState {
  constructor(private account: Account) {}

  activate(): void {
    console.log("Ativando a conta...");
    this.account.setState(new ActiveState(this.account));
  }

  block(): void {
    console.log("A conta ainda n√£o est√° ativada e n√£o pode ser bloqueada.");
  }

  cancel(): void {
    console.log("Cancelando a conta antes da ativa√ß√£o...");
    this.account.setState(new CancelledState(this.account));
  }

  getStatus(): string {
    return "WaitingActivation";
  }
}

class BlockedState implements AccountState {
  constructor(private account: Account) {}

  activate(): void {
    console.log("N√£o √© poss√≠vel ativar uma conta bloqueada. Contate o suporte.");
  }

  block(): void {
    console.log("A conta j√° est√° bloqueada.");
  }

  cancel(): void {
    console.log("Cancelando a conta bloqueada...");
    this.account.setState(new CancelledState(this.account));
  }

  getStatus(): string {
    return "Blocked";
  }
}

class CancelledState implements AccountState {
  constructor(private account: Account) {}

  activate(): void {
    console.log("Uma conta cancelada n√£o pode ser reativada.");
  }

  block(): void {
    console.log("Uma conta cancelada n√£o pode ser bloqueada.");
  }

  cancel(): void {
    console.log("A conta j√° est√° cancelada.");
  }

  getStatus(): string {
    return "Cancelled";
  }
}
```

### üìå **Passo 3: Criar a Classe `Account`**

Essa classe √© sua entidade e gerencia o estado atual da conta e delega chamadas para o estado correto.

```typescript
class Account {
  private state: AccountState;

  constructor() {
    // Estado inicial: aguardando ativa√ß√£o
    this.state = new WaitingActivationState(this);
  }

  setState(state: AccountState): void {
    this.state = state;
  }

  activate(): void {
    this.state.activate();
  }

  block(): void {
    this.state.block();
  }

  cancel(): void {
    this.state.cancel();
  }

  getStatus(): string {
    return this.state.getStatus();
  }
}
```

### üìå **Passo 4: Testar a Implementa√ß√£o**

Agora, vamos criar uma conta e testar as transi√ß√µes de estado, a execu√ß√£o seria algo assim:

```typescript
const myAccount = new Account();
console.log("Status inicial:", myAccount.getStatus());

myAccount.activate(); // Deve ativar a conta
console.log("Status atual:", myAccount.getStatus());

myAccount.block(); // Deve bloquear a conta
console.log("Status atual:", myAccount.getStatus());

myAccount.cancel(); // Deve cancelar a conta
console.log("Status atual:", myAccount.getStatus());

myAccount.activate(); // Tentativa de ativar uma conta cancelada (deve falhar)
console.log("Status final:", myAccount.getStatus());
```

### üìå **Explica√ß√£o**

1. **Encapsulamento dos estados:** Cada estado implementa um comportamento espec√≠fico e sabe para qual estado pode transitar.
2. **Mudan√ßa din√¢mica de comportamento:** A classe `Account` delega a execu√ß√£o das a√ß√µes ao estado atual.
3. **Evita `if-else` desnecess√°rios:** O c√≥digo fica mais organizado e escal√°vel.

Isso garante uma implementa√ß√£o flex√≠vel e permite adicionar novos estados sem modificar a l√≥gica central da `Account`. üöÄ

### Conclus√£o

No State Pattern que a gente montou, v√°rios princ√≠pios entraram em jogo sem a gente nem precisar pensar muito. Olha s√≥:

Encapsulamento? Sim Cada estado tem sua pr√≥pria l√≥gica, sem espalhar c√≥digo bagun√ßado por a√≠. O `Account` nem precisa saber como cada estado funciona, s√≥ delega e segue o jogo.

Responsabilidade √önica? Sim Cada classe faz uma coisa s√≥. O estado lida com as regras do status da conta, e o `Account` s√≥ troca de estado quando precisa. Sem mistura de responsabilidades.

Aberto/Fechado? Sim. Se amanh√£ precisar de um novo estado tipo `SuspendedState`, s√≥ criar e encaixar. N√£o precisa mexer no c√≥digo velho e correr risco de quebrar tudo.

Substitui√ß√£o de Liskov? Sim. O `Account` nem sabe qual estado t√° rodando. Ele s√≥ chama os m√©todos da interface e confia que o estado resolve. Pode trocar um pelo outro sem dor de cabe√ßa.

Invers√£o de Depend√™ncia? Sim. O `Account` depende da abstra√ß√£o (`AccountState`), n√£o de implementa√ß√µes espec√≠ficas. Zero acoplamento, total flexibilidade.

No fim, isso aqui √© c√≥digo escal√°vel, f√°cil de manter e sem aquele monte de `if` espalhado. Quer mudar um comportamento? Troca o estado e pronto. Isso √© POO do jeito certo. üöÄ

### Links
[https://refactoring.guru/pt-br/design-patterns/state](https://refactoring.guru/pt-br/design-patterns/state)
[https://elemarjr.com/clube-de-estudos/artigos/voce-precisa-conhecer-o-state-pattern/](https://elemarjr.com/clube-de-estudos/artigos/voce-precisa-conhecer-o-state-pattern/)
