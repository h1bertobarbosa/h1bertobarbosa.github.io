---
layout: post
author: humberto_barbosa
title: "Evitando Erros de √çndice √önico (E11000) ao Usar findOneAndUpdate com upsert no Mongoose"
date: 2025-04-26 20:11:00 -0300
categories: [Banco de Dados, Desenvolvimento Backend, Arquitetura de Sistemas, Boas Pr√°ticas de Programa√ß√£o, Gest√£o de Entregas]
tags: [MongoDB, Mongoose, Upsert, √çndices √önicos, Multi-tenant, Modelagem de Dados, E11000, findOneAndUpdate, Boas Pr√°ticas, Node.js]
---

Como garantir unicidade de remessas em sistemas multi-tenant no MongoDB? Entenda por que erros E11000 acontecem, como alinhar filtros de upsert com √≠ndices √∫nicos e evite armadilhas cl√°ssicas em modelagem de dados para opera√ß√µes cr√≠ticas.

## ‚úÖ Cen√°rio

Imagine um sistema de gest√£o de entregas com m√∫ltiplos clientes (empresas) utilizando a mesma plataforma. Cada cliente (representado por um `tenantId`) possui seus pr√≥prios **pedidos internos** (`clientOrderId`), que podem coincidir entre diferentes clientes, mas **n√£o dentro do mesmo cliente**.

Cada pedido tem **uma √∫nica remessa associada**, representada por um `shipment` com informa√ß√µes como nota fiscal, status e dados log√≠sticos.

Voc√™ precisa garantir que **haja apenas uma remessa por pedido e por cliente** ‚Äî e que atualiza√ß√µes venham a sobrescrever remessas existentes se o pedido j√° existir.

---

## üíæ Estrutura simplificada dos dados

```typescript
@Schema({
  collection: 'shipments',
  timestamps: true
}) export class ShipmentEntity extends Document {@Prop({
    type: String,
    required: true
  }) tenantId: string;@Prop({
    type: String,
    required: true
  }) clientOrderId: string;@Prop({
    type: String,
    required: true
  }) invoiceNumber: string;@Prop({
    type: String,
    required: true
  }) status: string;@Prop({
    type: Date,
  default:
    Date.now
  }) updatedAt:
  Date;
}
```

---

## üîê Definindo o √≠ndice √∫nico

Para garantir unicidade por cliente + pedido:

```typescript
ShipmentSchema.index(   { tenantId: 1, clientOrderId: 1 },   { unique: true }, );
```

Esse √≠ndice impede que existam dois documentos com a mesma combina√ß√£o `tenantId` e `clientOrderId`.

---
### üìà O Risco pro negocio

Quando pensamos em unicidade de remessas, n√£o √© s√≥ uma quest√£o de evitar erros t√©cnicos como o E11000.
**√â sobre proteger a integridade operacional do sistema.**

Se um pedido tiver duas remessas associadas por erro, as consequ√™ncias podem incluir:

- **Faturamento duplicado**: o cliente pode ser cobrado duas vezes pelo mesmo pedido.
- **Erro log√≠stico**: o centro de distribui√ß√£o pode despachar duas cargas separadas para o mesmo destino.
- **Problemas fiscais**: inconsist√™ncia nas notas fiscais emitidas pode gerar multas ou retrabalho junto √† Receita.
- **Perda de confian√ßa**: clientes empresariais esperam precis√£o; falhas assim corroem a rela√ß√£o de confian√ßa.


Ou seja:
**Definir corretamente a unicidade dos dados n√£o √© s√≥ uma quest√£o t√©cnica ‚Äî √© uma salvaguarda para a opera√ß√£o e para o relacionamento com o cliente.**

## ‚ùå O erro cl√°ssico: E11000

Se voc√™ tentar fazer um `findOneAndUpdate` assim:

```typescript
this.shipmentModel.findOneAndUpdate({clientOrderId: shipment.clientOrderId, invoiceNumber: shipment.invoiceNumber}, { $set: shipment }, { new: true, upsert: true });
```

Pode falhar com o erro:

```bash
E11000 duplicate key error collection: logistics.shipments index: tenantId_1_clientOrderId_1 dup key: { tenantId: "tenantA", clientOrderId: "12345" }
```

Isso ocorre porque o filtro ignora `tenantId`, violando a restri√ß√£o √∫nica definida pelo √≠ndice.

---

## ‚úÖ Solu√ß√£o: usar o filtro certo

```ts
await this.shipmentModel.findOneAndUpdate({tenantId: shipment.tenantId,clientOrderId: shipment.clientOrderId}, { $set: shipment }, { new: true, upsert: true } );
```

Agora o `upsert` respeita a chave √∫nica, atualizando corretamente se j√° houver uma remessa com o mesmo pedido para o mesmo cliente, ou criando um novo registro caso contr√°rio.

---

## üß† Conclus√£o

Quando trabalhamos com `upsert` no MongoDB, √© fundamental que o filtro usado esteja alinhado com o √≠ndice √∫nico que definimos. No caso que discutimos, isso significa sempre usar `tenantId` e `clientOrderId` juntos. Se voc√™ esquecer um deles ou misturar outros campos, como `invoiceNumber`, pode acabar quebrando a unicidade e gerando erros dif√≠ceis de diagnosticar.

√â importante lembrar que buscar por qualquer campo no MongoDB √© poss√≠vel ‚Äî mas isso n√£o significa que qualquer campo serve para garantir unicidade em opera√ß√µes cr√≠ticas. Se sua opera√ß√£o depende da certeza de que "n√£o existe outro igual", ent√£o o campo (ou a combina√ß√£o de campos) precisa estar refletido no √≠ndice √∫nico.

Quando acontece um erro como o E11000, n√£o √© s√≥ um problema de c√≥digo quebrado. √â um sinal de que a modelagem dos dados, a estrat√©gia de identifica√ß√£o e a opera√ß√£o do sistema podem estar desalinhadas. Esses erros s√£o uma √≥tima oportunidade para revisar e fortalecer o desenho do seu banco.

Por fim, sempre vale a pena pensar al√©m da parte t√©cnica: proteger a unicidade dos dados √© proteger tamb√©m a integridade do seu processo log√≠stico, financeiro e de relacionamento com os clientes. No final das contas, um sistema que respeita essas premissas √© mais robusto, confi√°vel ‚Äî e mais f√°cil de evoluir.
